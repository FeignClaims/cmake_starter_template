name: ci
on:
  pull_request:
  release:
    types: [published]
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  CONAN_HOME: ~/.conan2

jobs:
  Test:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ${{ matrix.os }}
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os:
          - ubuntu-22.04
          - macos-12
          - windows-2022
        compiler:
          # you can specify the version after `-` like "llvm-13.0.0".
          - llvm
          - gcc-11
        build_type:
          - Debug
          - Release
        cmake_generator:
          - "Ninja Multi-Config"
        cpack_generator:
          - ZIP

        include:
          # Inject gcov_executable variable
          - compiler: llvm
            gcov_executable: "llvm-cov gcov"
          - compiler: gcc-11
            gcov_executable: gcov-11

          # Inject actual compiler name
          - compiler: llvm
            compiler_name: clang
          - compiler: gcc-11
            compiler_name: gcc

          # Add msvc compiler for Windows
          - os: windows-2022
            compiler: msvc
            build_type: Debug
            cmake_generator: "Visual Studio 17 2022"
            cpack_generator: ZIP
            compiler_name: msvc

          - os: windows-2022
            compiler: msvc
            build_type: Release
            cmake_generator: "Visual Studio 17 2022"
            cpack_generator: ZIP
            compiler_name: msvc

          # Choose the corresponding profile

        # To exclude a specific job from the matrix (e.g gcc on Windows), you can use this syntax.
        # exclude:
        #   - os: windows-2022
        #     compiler: gcc

    steps:
      - uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.CONAN_HOME }}
            ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ hashFiles('./conanfile.py') }}-${{ matrix.cmake_generator }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ hashFiles('./conanfile.py') }}

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows')}}

          cmake: true
          ninja: true
          ccache: true
          python: true

          cppcheck: true
          clangtidy: true

          gcovr: true
          opencppcoverage: true

      - name: Install and config conan
        run: |
          pip3 install conan
          conan config install ./conan

      - name: Cleanup conan system packages (they are not properly cached)
        run: |
          conan remove '*/system' -c

      - name: Retrieve conan args
        id: conan
        shell: bash
        run: |
          echo "args=-pr:h '${{ matrix.os }}-${{ matrix.compiler_name }}-x86_64' -pr:b '${{ matrix.os }}-${{ matrix.compiler_name }}-x86_64' -c 'tools.cmake.cmaketoolchain:generator=${{ matrix.cmake_generator }}' -s 'build_type=${{ matrix.build_type }}' -b missing" >> "$GITHUB_OUTPUT"

      - name: Install conan packages
        run: |
          conan install . ${{ steps.conan.outputs.args }}

      - name: Configure cmake
        run: |
          cmake --preset ${{ matrix.compiler_name }} -D ENABLE_DEVELOPER_MODE:BOOL=${{ !(matrix.compiler_name != 'clang' && runner.os == 'Windows' && matrix.build_type == 'Release') }} -D OPT_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -D GIT_SHA:STRING=${{ github.sha }}

      - name: Build and test
        run: |
          conan build . ${{ steps.conan.outputs.args }}

      - name: Unix - Coverage
        if: runner.os != 'Windows' && matrix.build_type == 'Debug'
        working-directory: build/${{ matrix.compiler_name }}
        run: |
          ctest -C ${{ matrix.build_type }}
          gcovr -j ${{ env.nproc }} --delete --root ../../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Windows - Coverage
        if: runner.os == 'Windows' && matrix.build_type == 'Debug'
        working-directory: build/${{ matrix.compiler_name }}
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{matrix.build_type}}

      - name: Publish to codecov
        if: matrix.build_type == 'Debug'
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/${{ matrix.compiler_name }}/coverage.xml
